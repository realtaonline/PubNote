<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:wp="urn:ns:wordinator:simplewpml"
  xmlns:xhtml="http://www.w3.org/1999/xhtml"
  xmlns:local="urn:ns:local-functions"
  xmlns:relpath="http://dita2indesign/functions/relpath"
  xmlns:map="http://www.w3.org/2005/xpath-functions/map"
  exclude-result-prefixes="xs local relpath xhtml map"
  version="3.0"
  expand-text="yes"
  >
  <!-- ===================================================================
       Mode "get-style-name
       
       Does the mapping from elements-in-context to Word styles.
       
       The variable $classtoStyleNameMap provides the mapping from
       @class values to style names.
       
       For HTML generated by the DITA Open Toolkit the last token
       of the @class value usually reflects the context-specific
       class of the element, e.g., title1, title2.
              
       
       =================================================================== -->
  
  
  <xsl:variable name="classToStyleNameMap" as="map(xs:string, xs:string)">
    <!-- Mapping of DITA element types and generated classes to likely 
         style names.
         
         These styles need to exist in the Word template to actually have
         an effect.
      -->
    <xsl:map>
      <xsl:map-entry key="'b'" select="'bold'"/>
      <xsl:map-entry key="'cite'" select="'italic'"/>
      <xsl:map-entry key="'cmd'" select="'cmd'"/>
      <xsl:map-entry key="'cmdname'" select="'cmdname'"/>
      <xsl:map-entry key="'codeblock'" select="'Codeblock'"/>
      <xsl:map-entry key="'codeph'" select="'codeph'"/>
      <xsl:map-entry key="'dd'" select="'dd'"/>
      <xsl:map-entry key="'dlterm'" select="'normal'"/>
      <xsl:map-entry key="'filepath'" select="'filepath'"/>
      <xsl:map-entry key="'i'" select="'italic'"/>
      <xsl:map-entry key="'mainbooktitle'" select="'Title'"/>
      <xsl:map-entry key="'menucascade'" select="'menucascade'"/>
      <xsl:map-entry key="'option'" select="'option'"/>
      <xsl:map-entry key="'p'" select="'normal'"/>
      <xsl:map-entry key="'parameterentity'" select="'parameterentity'"/>
      <xsl:map-entry key="'parmname'" select="'parmname'"/>
      <xsl:map-entry key="'shortdesc'" select="'normal'"/>
      <xsl:map-entry key="'term'" select="'term'"/>
      <xsl:map-entry key="'uicontrol'" select="'uicontrol'"/>
      <xsl:map-entry key="'varname'" select="'varname'"/>
      <xsl:map-entry key="'xmlatt'" select="'xmlatt'"/>
      <xsl:map-entry key="'xmlelement'" select="'xmlelement'"/>
      <xsl:map-entry key="'xmlnsname'" select="'xmlnsname'"/>
    </xsl:map>
  </xsl:variable>
    
  <xsl:template mode="get-style-name" match="section/header" as="xs:string?">
    <xsl:param name="doDebug" as="xs:boolean" tunnel="yes" select="false()"/>

    <xsl:variable name="headingLevel" as="xs:integer"
      select="count(ancestor::section)"
    />
    <xsl:variable name="result" as="xs:string" 
      select="'Heading ' || $headingLevel"
    />
    <xsl:if test="$doDebug">
      <xsl:message>+ [DEBUG] get-style-name: section/header. Returning "{$result}".</xsl:message>
    </xsl:if>
    <xsl:sequence select="$result"/>
  </xsl:template>
  
  <xsl:template mode="get-style-name" as="xs:string?"
    match="
      h1 |
      h2 |
      h3 |
      h4 |
      h5
    " 
    >
    <xsl:param name="doDebug" as="xs:boolean" tunnel="yes" select="false()"/>
    
    <xsl:variable name="heading-number" as="xs:string"
      select="substring-after(name(.), 'h')"
    />
    <xsl:variable name="headingLevel" as="xs:integer"
      select="xs:integer($heading-number)"
    />
    <xsl:variable name="result" as="xs:string" 
      select="'Heading ' || $headingLevel"
    />
    <xsl:if test="$doDebug">
      <xsl:message>+ [DEBUG] get-style-name: {name(.)}. Returning "{$result}".</xsl:message>
    </xsl:if>
    <xsl:sequence select="$result"/>
  </xsl:template>
  
  <xsl:template mode="get-style-name" match="span[@class] | p[@class]" as="xs:string?">
    <xsl:param name="doDebug" as="xs:boolean" tunnel="yes" select="false()"/>
    
    <xsl:variable name="tokens" as="xs:string*" select="tokenize(@class, ' ')"/>
    <xsl:variable name="key" select="$tokens[last()]"/>
    <xsl:variable name="styleName" as="xs:string?"
      select="map:get($classToStyleNameMap, $key)"
    />
    <xsl:sequence select="if (exists($styleName)) then $styleName else ()"/>
  </xsl:template>
  
  <xsl:template mode="get-style-name" match="li" as="xs:string">
    <xsl:param name="doDebug" as="xs:boolean" tunnel="yes" select="false()"/>
    
    <xsl:variable name="list-type" as="xs:string" select="name(..)"/>
    <xsl:variable name="level" as="xs:string"
      select="string(count(ancestor::*[name(.) = $list-type]))"
    />
    <xsl:variable name="level" as="xs:string"
      select="if ($level eq '1') then '' else $level"
    />
    <xsl:sequence select="'List ' || $level"/>
  </xsl:template>
  
  <xsl:template mode="get-style-name" match="*" priority="-1" as="xs:string?">
    <xsl:param name="doDebug" as="xs:boolean" tunnel="yes" select="false()"/>
    
    <!-- No style mapping -->
  </xsl:template>
</xsl:stylesheet>